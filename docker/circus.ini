;进程管理
[circus]
check_delay = 5
endpoint = tcp://127.0.0.1:5555
pubsub_endpoint = tcp://127.0.0.1:5556

; 监听 compose 定义的 service
[watcher:web]
cmd = vanas-tkm --fd $(circus.sockets.web)
;cmd = vanas-tkm
warmup_delay = 0
use_sockets = True
; 运行 5 个进程，可以实现负载均衡
numprocesses = 5
; 设置 true 所有衍生的进程 都能访问容器环境变量
copy_env = True
stdout_stream.class = FileStream
stdout_stream.filename = /logs/flask-stdout.log
stdout_stream.max_bytes = 10485760
stdout_stream.backup_count = 4
stderr_stream.class = FileStream
stderr_stream.filename = /logs/flask-stderr.log
stderr_stream.max_bytes = 10485760
stderr_stream.backup_count = 4

; service 的端口，在 [watcher:web] 作为参数(套接字的文件描述符的值来替换变量) 传递到 app 中.
; 描述用来绑定的 TCP 套接字的主机和端口
[socket:web]
; 端口 小写
port = 5000
; host 小写 默认 127.0.0.1 如果放置在 docker 中，或者其他中需要设置为0.0.0.0
host = 0.0.0.0

[watcher:nginx]
# 因为 copy_env 设置为 True 可以直接访问环境变量，就能直接使用命令  nginx
cmd =  nginx -c /app/docker/nginx.conf
numprocesses = 1
copy_env = True
